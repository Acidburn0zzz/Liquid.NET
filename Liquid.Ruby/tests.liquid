//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     Source: {{ sourcefile }}
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Liquid.Ruby\writetest.rb
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Liquid.NET.Constants;
using NUnit.Framework;

namespace Liquid.NET.Tests.Ruby
{
    [TestFixture]
    public class {{ classname }} {

        [Test]{% for test in tests %}
        [TestCase(@"{{test.input}}", @"{{test.assigns}}", @"{{test.expected}}")]{% endfor %}
        public void It_Should_Match_Ruby_Output(String input, String assigns, String expected) {

            // Arrange
            ITemplateContext ctx = new TemplateContext().WithAllFilters();
            
            foreach (var tuple in DictionaryFactory.CreateStringMapFromJson(assigns))
            {
                ctx.DefineLocalVariable(tuple.Item1, tuple.Item2);
            }

            
            var template = LiquidTemplate.Create(input);
            
            // Act
            String result = template.LiquidTemplate.Render(ctx);
        
            // Assert
            Assert.That(result.Trim(), Is.EqualTo(expected));
        }

        {% if exceptions != empty %}[Test]{% for test in exceptions %}
        [TestCase(@"{{test.input}}", @"{{test.assigns}}", @"{{test.expected | remove: 'EXCEPTION: '}}")]{% endfor %}
        public void It_Should_Generate_An_Exception(String input, String assigns, String expectedMessage) 
        {
            // Arrange
            ITemplateContext ctx = new TemplateContext()
                .WithAllFilters()
                .WithFileSystem(new TestFileSystem());

            foreach (var tuple in DictionaryFactory.CreateStringMapFromJson(assigns))
            {
                ctx.DefineLocalVariable(tuple.Item1, tuple.Item2);
            }

            var template = LiquidTemplate.Create(input);
            IList<LiquidError> errors = new List<LiquidError>();
            try
            {
                String result = template.LiquidTemplate.Render(ctx, onRenderingError: errors.Add);
                Assert.That(errors.Count, Is.EqualTo(1));
                Assert.That(errors[0].ToString(), Is.StringContaining(expectedMessage));
            }
            catch (LiquidParserException ex)
            {
                // Assert
                Assert.That(ex.LiquidErrors[0].ToString(), Is.StringContaining(expectedMessage));
            }
            //catch (LiquidRendererException ex)
            //{
                // Assert
                // Assert.That(ex.LiquidErrors[0].ToString(), Is.StringContaining(expectedMessage));
                // Assert.That(errors.ToString(), Is.StringContaining(expectedMessage));
            //}        
        }
        {% endif %}
    }
}
